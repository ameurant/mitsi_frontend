<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      lang="fr"
      metal:use-macro="context/main_template/macros/master"
      i18n:domain="box">

<body>

<!--<metal:block fill-slot="top_slot"
           tal:define="dummy python:request.set('disable_border',1)" />-->

<metal:main fill-slot="content-core"
            tal:define="idRound request/idRound;
                        boxView context/@@manageBox;
                        roundsView context/@@manageRounds; 
                        myRound python:roundsView.getRoundById(idRound);
                        allBoxes python:boxView.getAllBoxesFromRound(idRound)">
                        
                        <!--myDistance python:roundsView.getDistanceRound(idRound);-->

    <h2>
        <i class="fas fa-ellipsis-v"></i>
        Information sur la tournée : <em>${myRound/roundName}</em>
    </h2>
    
    <div class="flex-box flex-justify-content-space-between">
        <section class="section-donnee">
            <div class="box">
                Type de la tournée :
                <span tal:content="myRound/roundType"
                      class="form-input-data" /><br />
                Heure de départ :
                <span tal:content="myRound/roundStartTime"
                      class="form-input-data" /><br />
                Durée estimée :
                <span tal:content="myRound/roundEstimedTime"
                      class="form-input-data" /><br />
                
            </div>
            <div class="form-input">
                <tal:boucle tal:repeat="myBox allBoxes">
                    <div class="box">
                        <strong> 
                            <span tal:content="myBox/name"
                                  class="form-input-data" />
                        </strong>
                        <br />
                        <span tal:content="myBox/address" />
                        <br />
                        <span tal:content="myBox/cp" /> <span tal:content="myBox/localite" />
                        <br />
                        <span tal:content="myBox/lat" /> :: <span tal:content="myBox/long" />
                    </div>
                </tal:boucle>
            </div>
        </section>

        <section class="section-carte">
            <div id="map-mitsiboxes"></div>
        </section>
    </div>


<script>
require(["++theme++mitsibox/js/leaflet-src.js"], function(mapBox){
    
    let idRound = "<span tal:replace='idRound' />";
    console.log(idRound);

    
    function displayMap(allBoxes){
        let iconeLab = L.icon({
                iconUrl: '++theme++mitsibox/images/marker-labo.png',
                shadowUrl: '++theme++mitsibox/images/marker-shadow.png',
                iconSize: [25, 41], // dimension de l’icone
                shadowSize: [41, 41], // taille de l’ombre
                //iconAnchor: [0, 5], // point ou l’icône va se positionner
                shadowAnchor: [15, 15], // même chose pour l’ombre
                popupAnchor: [-3, -10] // point à partir duquel le pop-up devrait s’ouvrir relativement par rapport à iconAnchor
                });

        let iconeAlert = L.icon({
                iconUrl: '++theme++mitsibox/images/marker-icon-red.png',
                iconSize: [25, 41], // dimension de l’icone
                shadowSize: [41, 41], // taille de l’ombre
                popupAnchor: [-3, -10] // point à partir duquel le pop-up devrait s’ouvrir relativement par rapport à iconAnchor
                });

        let mymap = L.map('map-mitsiboxes').setView([50.581997, 4.078926], 10);
        let marker = L.marker([50.581997, 4.078926], {icon: iconeLab}).addTo(mymap).bindPopup("<b> CHU Haute Senne </b>");
        
        /*
        let tableau = [["BOX lefred", 50.464886, 4.100733],
                       ["Box Alain", 50.45569460014328, 4.171436625161833],
                       ["BOX Stéphane", 50.464036, 4.107562],
                       ["Box Greg", 50.471628, 4.287324]];
        */
        for (i = 0; i < allBoxes.length; i++){
            let nameBox = allBoxes[i]['name'];
            let latBox = allBoxes[i]['lat'];
            let longBox = allBoxes[i]['long'];
            let depositCount = allBoxes[i]['deposit_count'];

            if (depositCount > 10){
                let marker = L.marker([latBox, longBox], {icon: iconeAlert}).addTo(mymap).bindPopup("<b>" + nameBox + "</b><br />" + "<span class='bleu-glyphe texte-centrer'>" + depositCount + "</span>" );
            }
            else{
                let marker = L.marker([latBox, longBox]).addTo(mymap).bindPopup("<b>" + nameBox + "</b><br />" + "<span class='bleu-glyphe texte-centrer'>" + depositCount + "</span>" );
            }
        };

        L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
            maxZoom: 18,
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
                '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
            id: 'mapbox/streets-v11',
            tileSize: 512,
            zoomOffset: -1
        }).addTo(mymap);
    }

    function getBoxOfRound(idRound) {
        $.ajax({
            url: "getJsonOfAllBoxesFromRound",
            type:'GET',
            dataType: 'json',
            data: {idRound: idRound},
            success: 
                function(data){
                    console.log("data : ", data);
                    displayMap(data);
                },
            error: 
                function(xhr, status, error, textStatus, errorThrown) {
                    let errorMessage = xhr.status + ': ' + xhr.textStatus + ' ' + xhr.statusText + ' ' + errorThrown;
                    alert('Error - ' + errorMessage);
                }
        })
    }
    getBoxOfRound(idRound);
    
});
</script>
</metal:main>
</body>
</html>
